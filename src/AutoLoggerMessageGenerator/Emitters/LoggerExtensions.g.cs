// <auto-generated/>
#nullable enable

using System;

namespace Microsoft.Extensions.Logging
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("AutoLoggerMessageGenerator", "1.0.0.0")]
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    [global::System.Diagnostics.DebuggerStepThrough]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public static class GenericLoggerExtensions
    {
        public static void LogTrace<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogTrace(@message, new object?[] { @arg1 });
        }

        public static void LogTrace<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogTrace(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogTrace<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogTrace(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogTrace<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogTrace(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogTrace(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogTrace(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogDebug<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogDebug(@message, new object?[] { @arg1 });
        }

        public static void LogDebug<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogDebug(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogDebug<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogDebug(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogDebug<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogDebug(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogDebug(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogDebug(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogInformation<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogInformation(@message, new object?[] { @arg1 });
        }

        public static void LogInformation<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogInformation(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogInformation<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogInformation(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogInformation<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogInformation(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogInformation(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogInformation(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogWarning<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogWarning(@message, new object?[] { @arg1 });
        }

        public static void LogWarning<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogWarning(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogWarning<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogWarning(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogWarning<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogWarning(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogWarning(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogWarning(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogError<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogError(@message, new object?[] { @arg1 });
        }

        public static void LogError<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogError(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogError<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogError(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogError<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogError(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogError<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogError(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogError<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogError(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogCritical<T1>(this ILogger @logger, string @message, T1 @arg1)
        {
            @logger.LogCritical(@message, new object?[] { @arg1 });
        }

        public static void LogCritical<T1, T2>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogCritical(@message, new object?[] { @arg1, @arg2 });
        }

        public static void LogCritical<T1, T2, T3>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogCritical(@message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogCritical<T1, T2, T3, T4>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogCritical(@message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogCritical(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5, T6>(this ILogger @logger, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogCritical(@message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }



        public static void LogTrace<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogTrace<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogTrace<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogTrace<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogTrace(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogDebug<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogDebug<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogDebug<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogDebug<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogDebug(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogInformation<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogInformation<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogInformation<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogInformation<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogInformation(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogWarning<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogWarning<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogWarning<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogWarning<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogWarning(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogError<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogError<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogError<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogError<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogError<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogError<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogError(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogCritical<T1>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1 });
        }

        public static void LogCritical<T1, T2>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogCritical<T1, T2, T3>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogCritical<T1, T2, T3, T4>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5, T6>(this ILogger @logger, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogCritical(@exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }



        public static void LogTrace<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogTrace<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogTrace<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogTrace<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogTrace(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogDebug<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogDebug<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogDebug<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogDebug<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogDebug(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogInformation<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogInformation<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogInformation<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogInformation<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogInformation(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogWarning<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogWarning<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogWarning<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogWarning<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogWarning(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogError<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogError<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogError<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogError<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogError<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogError<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogError(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogCritical<T1>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1 });
        }

        public static void LogCritical<T1, T2>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogCritical<T1, T2, T3>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogCritical<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogCritical(@eventId, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }



        public static void LogTrace<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogTrace<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogTrace<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogTrace<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogTrace<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogTrace(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogDebug<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogDebug<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogDebug<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogDebug<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogDebug<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogDebug(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogInformation<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogInformation<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogInformation<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogInformation<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogInformation<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogInformation(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogWarning<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogWarning<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogWarning<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogWarning<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogWarning<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogWarning(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogError<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogError<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogError<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogError<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogError<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogError<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogError(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }


        public static void LogCritical<T1>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1 });
        }

        public static void LogCritical<T1, T2>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1, @arg2 });
        }

        public static void LogCritical<T1, T2, T3>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3 });
        }

        public static void LogCritical<T1, T2, T3, T4>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5 });
        }

        public static void LogCritical<T1, T2, T3, T4, T5, T6>(this ILogger @logger, EventId @eventId, Exception? @exception, string @message, T1 @arg1, T2 @arg2, T3 @arg3, T4 @arg4, T5 @arg5, T6 @arg6)
        {
            @logger.LogCritical(@eventId, @exception, @message, new object?[] { @arg1, @arg2, @arg3, @arg4, @arg5, @arg6 });
        }
    }
}
